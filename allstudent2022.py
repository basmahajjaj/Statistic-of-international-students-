# -*- coding: utf-8 -*-
"""Allstudent2022.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rBRRHaJk_yFK4YFvhrc8DBvxw7gvsFWt
"""



from re import IGNORECASE
# Code to read file into colaboratory:
!pip install -U -q PyDrive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials
!pip install pandas
!pip install openpyxl

#Autheticate E-Mail ID
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

downloaded = drive.CreateFile({"id":"1vGqYIJAEjFsOqtRRxPPm90JAe6HX_Wmk"})
downloaded.GetContentFile(" إحصائية الوافدين بدون اجمالي جنسيه 2022.xlsx")

import pandas as pd
Allstudents2022 =pd.read_excel(' إحصائية الوافدين بدون اجمالي جنسيه 2022.xlsx', sheet_name=None) 
Allstudents2022= pd.concat(Allstudents2022[frame] for frame in Allstudents2022.keys())


df =pd.read_excel(' إحصائية الوافدين بدون اجمالي جنسيه 2022.xlsx', sheet_name=None) 
df= pd.concat(df[frame] for frame in df.keys())

Allstudents2022['Frist Class']=Allstudents2022['الاولي-ذ']+Allstudents2022['الاولي-ث']
Allstudents2022['second Class']=Allstudents2022['ثانية-ذ']+Allstudents2022['ثانية-ث']
Allstudents2022['third Class']=Allstudents2022['ثالثة-ذ']+Allstudents2022['ثالثة-ث']
Allstudents2022['fourth Class']=Allstudents2022['رابعة-ذ']+Allstudents2022['رابعة-ث']
Allstudents2022['Fifth Class']=Allstudents2022['خامسة-ذ']+Allstudents2022['خامسة-ث']
#virtical sum of studnts counts
class2022_sum = [Allstudents2022['Frist Class'].sum(),Allstudents2022['second Class'].sum(), Allstudents2022['third Class'].sum(), 
        Allstudents2022['fourth Class'].sum(), Allstudents2022['Fifth Class'].sum()]


#horizontal count according to genceya
list_of_nation_columns = ['Frist Class','second Class','third Class','fourth Class','Fifth Class']
Allstudents2022['Nation2022All']=Allstudents2022[list_of_nation_columns].sum(axis=1)

#df for all calculation
df['Frist Class']=df['الاولي-ذ']+df['الاولي-ث']
df['second Class']=df['ثانية-ذ']+df['ثانية-ث']
df['third Class']=df['ثالثة-ذ']+df['ثالثة-ث']
df['fourth Class']=df['رابعة-ذ']+df['رابعة-ث']
df['Fifth Class']=df['خامسة-ذ']+df['خامسة-ث']
class2022_sum = [df['Frist Class'].sum(),df['second Class'].sum(), df['third Class'].sum(), 
        df['fourth Class'].sum(), df['Fifth Class'].sum()]

#horizontal count according to genceya
list_of_nation_columns = ['Frist Class','second Class','third Class','fourth Class','Fifth Class']
df['Nation2022All']=df[list_of_nation_columns].sum(axis=1)

#group countries and qara
qara2022=df.groupby(['Location'])
africa2022=qara2022.get_group('Africa')
Asia2022=qara2022.get_group('Asia')
eur2022=qara2022.get_group('Europe and America')

africa2022['Frist Class']=africa2022['الاولي-ذ']+africa2022['الاولي-ث']
africa2022['second Class']=africa2022['ثانية-ذ']+africa2022['ثانية-ث']
africa2022['third Class']=africa2022['ثالثة-ذ']+africa2022['ثالثة-ث']
africa2022['fourth Class']=africa2022['رابعة-ذ']+africa2022['رابعة-ث']
africa2022['Fifth Class']=africa2022['خامسة-ذ']+africa2022['خامسة-ث']
africa2022_sum = [africa2022['Frist Class'].sum(),africa2022['second Class'].sum(), africa2022['third Class'].sum(), 
        africa2022['fourth Class'].sum(), africa2022['Fifth Class'].sum()]


Asia2022['Frist Class']=Asia2022['الاولي-ذ']+Asia2022['الاولي-ث']
Asia2022['second Class']=Asia2022['ثانية-ذ']+Asia2022['ثانية-ث']
Asia2022['third Class']=Asia2022['ثالثة-ذ']+Asia2022['ثالثة-ث']
Asia2022['fourth Class']=Asia2022['رابعة-ذ']+Asia2022['رابعة-ث']
Asia2022['Fifth Class']=Asia2022['خامسة-ذ']+Asia2022['خامسة-ث']
Asia2022_sum = [Asia2022['Frist Class'].sum(),Asia2022['second Class'].sum(), Asia2022['third Class'].sum(), 
        Asia2022['fourth Class'].sum(), Asia2022['Fifth Class'].sum()]


eur2022['Frist Class']=eur2022['الاولي-ذ']+eur2022['الاولي-ث']
eur2022['second Class']=eur2022['ثانية-ذ']+eur2022['ثانية-ث']
eur2022['third Class']=eur2022['ثالثة-ذ']+eur2022['ثالثة-ث']
eur2022['fourth Class']=eur2022['رابعة-ذ']+eur2022['رابعة-ث']
eur2022['Fifth Class']=eur2022['خامسة-ذ']+eur2022['خامسة-ث']
eur2022_sum = [eur2022['Frist Class'].sum(),eur2022['second Class'].sum(), eur2022['third Class'].sum(), 
        eur2022['fourth Class'].sum(), eur2022['Fifth Class'].sum()]

#fuction to reshape arabic sentence like title
def reshapingarbic(Text):
    x=arabic_reshaper.reshape(Text)
    x=get_display(x)
    return x

# function to add value labels
def addlabels(x,y):
    for i in range(len(x)):
        plt.text(i, y[i], y[i], ha = 'center',fontsize=20)

#install bigger libraries once
!pip install numpy scipy matplotlib ipython jupyter pandas sympy nose seaborn
!pip install pip install python-bidi
!pip install arabic_reshaper

# Commented out IPython magic to ensure Python compatibility.
#@Allcountries2022.png all genseyat
#install libraries       
!pip install numpy scipy matplotlib ipython jupyter pandas sympy nose seaborn
!pip install pip install python-bidi
!pip install arabic_reshaper
#importing libraries           
import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np
import pandas as pd
import seaborn as sns

from bidi.algorithm import get_display
import arabic_reshaper
sns.set()
# %matplotlib notebook
df.head()
#reshaping genseia and 
x=[]
for item in df.الجنسيه.values:
    x.append(get_display(arabic_reshaper.reshape(item)))
df['title']=x

# create a data frame, sort and format values:
data = pd.DataFrame(df, columns=['Nation2022All', 'title'])
data_sorted = data.sort_values(by='Nation2022All', ascending=True)
data_sorted['revenue'] = data_sorted['Nation2022All'] / 1
pd.options.display.float_format = '{:,.0f}'.format
data_sorted.set_index('title', inplace=True)
ranking = data_sorted.head(50)
ranking

#create horizontal desceding bar
#variables
index = ranking.index
values = ranking['Nation2022All']
plot_title = reshapingarbic('اجمالي عدد الطلاب الوافدين محدده بالجنسيه لعام 2022')
title_size =30
subtitle = reshapingarbic('كليه الطب جامعه عين شمس')
x_label = reshapingarbic('عدد الطلاب')
filename = 'Allcountries2022'
#Create subplots and set a colormap
ranking.sort_values(by='Nation2022All', inplace=True,  ascending=True)

#draw a figure with a subplot.         
fig, ax = plt.subplots(figsize=(26,16), facecolor=(.94, .94, .94))
mpl.pyplot.viridis()#colormap


# Create bars 
bar = ax.barh(index, values)
plt.tight_layout()
ax.xaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))
ax.yaxis.set_tick_params(labelsize=21)# change the font size of Y-label

#Set title, its font size, and position
title = plt.title(plot_title, pad=50, fontsize=title_size)
title.set_position([.33, 1])
plt.subplots_adjust(top=0.9, bottom=0.1,left=0.1)        

#Create gradient background        
ax.grid(zorder=0)

def gradientbars(bars):
    grad = np.atleast_2d(np.linspace(0,1,256))
    ax = bars[0].axes
    lim = ax.get_xlim()+ax.get_ylim()
    for bar in bars:
        bar.set_zorder(1)
        bar.set_facecolor('none')
        x,y = bar.get_xy()
        w, h = bar.get_width(), bar.get_height()
        ax.imshow(grad, extent=[x+w, x, y, y+h], aspect='auto', zorder=1)
    ax.axis(lim)
gradientbars(bar)

##create barlabels/annotations        
rects = ax.patches
# Place a label for each bar
for rect in rects:
    # Get X and Y placement of label from rect
    x_value = rect.get_width()
    y_value = rect.get_y() + rect.get_height() / 2
    # Number of points between bar and label; change to your liking
    space = -30
    # Vertical alignment for positive values
    ha = 'left'

    # If value of bar is negative: place label to the left of the bar
    if x_value < 0:
        # Invert space to place label to the left
        space = +1
        # Horizontally align label to the right
        ha = 'left'
        color='black'

    # Use X value as label and format number
    label = '{:,.0f}'.format(x_value)

    # Create annotation
    plt.annotate(
        label,                      # Use `label` as label
        (x_value, y_value),         # Place label at bar end
        xytext=(space, 0),          # Horizontally shift label by `space`
        textcoords='offset points', # Interpret `xytext` as offset in points
        va='center',                # Vertically center label
        ha=ha,                      # Horizontally align label differently for positive and negative values
        color = 'white')            # Change label color to white

         
# Set subtitle
tfrom = ax.get_xaxis_transform()
ann = ax.annotate(subtitle, xy=(30, 1), xycoords=tfrom, bbox=dict(boxstyle='square,pad=3', fc='#f0f0f0', ec='none'))

#Set x-label
ax.set_xlabel(x_label, color='#525252')
plt.savefig(filename+'.png', facecolor=(.94, .94, .94))

# Commented out IPython magic to ensure Python compatibility.
#2022 max 20 counrties
#install libraries       
!pip install numpy scipy matplotlib ipython jupyter pandas sympy nose seaborn
!pip install pip install python-bidi
!pip install arabic_reshaper
#importing libraries           
import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np
import pandas as pd
import seaborn as sns

from bidi.algorithm import get_display
import arabic_reshaper
sns.set()
# %matplotlib notebook
df.head()
#reshaping genseia and 
x=[]
for item in df.الجنسيه.values:
    x.append(get_display(arabic_reshaper.reshape(item)))
df['title']=x

# create a data frame, sort and format values:
data = pd.DataFrame(df, columns=['Nation2022All', 'title'])
data_sorted = data.sort_values(by='Nation2022All', ascending=True)
data_sorted['revenue'] = data_sorted['Nation2022All'] / 1
pd.options.display.float_format = '{:,.0f}'.format
data_sorted.set_index('title', inplace=True)
ranking = data_sorted.tail(20)
ranking

#create horizontal desceding bar
#variables
index = ranking.index
values = ranking['Nation2022All']
plot_title = reshapingarbic('اجمالي عدد الطلاب الوافدين من اكبر 20 دولة  لعام 2022')
title_size =30
subtitle = reshapingarbic('كليه الطب جامعه عين شمس')
x_label = reshapingarbic('عدد الطلاب')
filename = 'Maxcountries2022'
#Create subplots and set a colormap
ranking.sort_values(by='Nation2022All', inplace=True,  ascending=True)

#draw a figure with a subplot.         
fig, ax = plt.subplots(figsize=(15,10), facecolor=(.94, .94, .94))
mpl.pyplot.viridis()#colormap

# Create bars 

bar = ax.barh(index, values)
plt.tight_layout()
ax.xaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))
ax.yaxis.set_tick_params(labelsize=15)# change the font size of y-label

#Set title, its font size, and position
title = plt.title(plot_title, pad=30, fontsize=title_size)
title.set_position([.5, 1])
plt.subplots_adjust(top=0.9, bottom=0.1,left=0.1)        

#Create gradient background        
ax.grid(zorder=0)

def gradientbars(bars):
    grad = np.atleast_2d(np.linspace(0,1,256))
    ax = bars[0].axes
    lim = ax.get_xlim()+ax.get_ylim()
    for bar in bars:
        bar.set_zorder(1)
        bar.set_facecolor('none')
        x,y = bar.get_xy()
        w, h = bar.get_width(), bar.get_height()
        ax.imshow(grad, extent=[x+w, x, y, y+h], aspect='auto', zorder=1)
    ax.axis(lim)
gradientbars(bar)

##create barlabels/annotations        
rects = ax.patches
# Place a label for each bar
for rect in rects:
    # Get X and Y placement of label from rect
    x_value = rect.get_width()
    y_value = rect.get_y() + rect.get_height() / 2
    # Number of points between bar and label; change to your liking
    space = -20
    # Vertical alignment for positive values
    ha = 'left'

    # If value of bar is negative: place label to the left of the bar
    if x_value < 0:
        # Invert space to place label to the left
        space = +1
        # Horizontally align label to the right
        ha = 'left'
        color='black'

    # Use X value as label and format number
    label = '{:,.0f}'.format(x_value)

    # Create annotation
    plt.annotate(
        label,                      # Use `label` as label
        (x_value, y_value),         # Place label at bar end
        xytext=(space, 0),          # Horizontally shift label by `space`
        textcoords='offset points', # Interpret `xytext` as offset in points
        va='center',                # Vertically center label
        ha=ha,                      # Horizontally align label differently for positive and negative values
        color = 'white')            # Change label color to white

         
# Set subtitle
tfrom = ax.get_xaxis_transform()
ann = ax.annotate(subtitle, xy=(5, 1), xycoords=tfrom, bbox=dict(boxstyle='square,pad=1.6', fc='#f0f0f0', ec='none'))

#Set x-label
ax.set_xlabel(x_label, color='#525252')
plt.savefig(filename+'.png', facecolor=(.94, .94, .94))

# Commented out IPython magic to ensure Python compatibility.

#2022 Minmum 20 counrties
#install libraries       
!pip install numpy scipy matplotlib ipython jupyter pandas sympy nose seaborn
!pip install pip install python-bidi
!pip install arabic_reshaper
#importing libraries           
import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np
import pandas as pd
import seaborn as sns

from bidi.algorithm import get_display
import arabic_reshaper
sns.set()
# %matplotlib notebook

#reshaping genseia and 
x=[]
for item in df.الجنسية.values:
    x.append(get_display(arabic_reshaper.reshape(item)))
df['title']=x

# create a data frame, sort and format values:
data = pd.DataFrame(df, columns=['Nation2022All', 'title'])
data_sorted = data.sort_values(by='Nation2022All', ascending=True)
pd.options.display.float_format = '{:,.0f}'.format
data_sorted.set_index('title', inplace=True)
ranking = data_sorted.head(20)
ranking

#create horizontal desceding bar
#variables
index = ranking.index
values = ranking['Nation2022All']
plot_title = reshapingarbic('اجمالي عدد الطلاب الوافدين من اقل 20 دولة  لعام 2022')
title_size =30
subtitle = reshapingarbic('كليه الطب جامعه عين شمس')
x_label = reshapingarbic('عدد الطلاب')
filename = 'Mincountries2022'
#Create subplots and set a colormap
ranking.sort_values(by='Nation2022All', inplace=True,  ascending=True)

#draw a figure with a subplot.         
fig, ax = plt.subplots(figsize=(15,10), facecolor=(.94, .94, .94))
mpl.pyplot.viridis()#colormap


# Create bars 

bar = ax.barh(index, values)
plt.tight_layout()
ax.xaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))
ax.yaxis.set_tick_params(labelsize=15)# change the font size of y-label

#Set title, its font size, and position
title = plt.title(plot_title, pad=30, fontsize=title_size)
title.set_position([.5, 1])
plt.subplots_adjust(top=0.9, bottom=0.1,left=0.1)        

#Create gradient background        
ax.grid(zorder=0)

def gradientbars(bars):
    grad = np.atleast_2d(np.linspace(0,1,256))
    ax = bars[0].axes
    lim = ax.get_xlim()+ax.get_ylim()
    for bar in bars:
        bar.set_zorder(1)
        bar.set_facecolor('none')
        x,y = bar.get_xy()
        w, h = bar.get_width(), bar.get_height()
        ax.imshow(grad, extent=[x+w, x, y, y+h], aspect='auto', zorder=1)
    ax.axis(lim)
gradientbars(bar)

##create barlabels/annotations        
rects = ax.patches
# Place a label for each bar
for rect in rects:
    # Get X and Y placement of label from rect
    x_value = rect.get_width()
    y_value = rect.get_y() + rect.get_height() / 2
    # Number of points between bar and label; change to your liking
    space = -22
    # Vertical alignment for positive values
    ha = 'left'

    # If value of bar is negative: place label to the left of the bar
    if x_value < 0:
        # Invert space to place label to the left
        space *= -2
        # Horizontally align label to the right
        ha = 'right'
        color='black'

    # Use X value as label and format number
    label = '{:,.0f}'.format(x_value)

    # Create annotation
    plt.annotate(
        label,                      # Use `label` as label
        (x_value, y_value),         # Place label at bar end
        xytext=(space, 0),          # Horizontally shift label by `space`
        textcoords='offset points', # Interpret `xytext` as offset in points
        va='center',                # Vertically center label
        ha=ha,                      # Horizontally align label differently for positive and negative values
        color = 'white')            # Change label color to white

         
# Set subtitle
tfrom = ax.get_xaxis_transform()
ann = ax.annotate(subtitle, xy=(5, 1), xycoords=tfrom, bbox=dict(boxstyle='square,pad=1.6', fc='#f0f0f0', ec='none'))

#Set x-label
ax.set_xlabel(x_label, color='#525252')
plt.savefig(filename+'.png', facecolor=(.94, .94, .94))

# Commented out IPython magic to ensure Python compatibility.
#2022 europe counrties
#install libraries       
!pip install numpy scipy matplotlib ipython jupyter pandas sympy nose seaborn
!pip install pip install python-bidi
!pip install arabic_reshaper
#importing libraries           
import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np
import pandas as pd
import seaborn as sns

from bidi.algorithm import get_display
import arabic_reshaper
sns.set()
# %matplotlib notebook
df.head()

x = [0,1,2,3,4,5,6,7]

#reshaping genseia and 
zz=[]
for item in eur2022.الجنسيه.values:
    zz.append(get_display(arabic_reshaper.reshape(item)))
eur2022['title']=zz
# create a data frame, sort and format values:
data = pd.DataFrame(eur2022, columns=['Nation2022All', 'title'])
data_sorted = data.sort_values(by='Nation2022All', ascending=True)
data_sorted['Nation2022All'] = data_sorted['Nation2022All'] / 1
pd.options.display.float_format = '{:,.0f}'.format
data_sorted.set_index('title', inplace=True)
ranking = data_sorted.head(8)

#label x-axis
countrylabel=ranking.index
#variables
index = ranking.index
values = ranking['Nation2022All']
plot_title = reshapingarbic('اجمالي عدد الطلاب الوافدين من قارات اوروبا وامريكا الشماليه والجنوبيه لعام 2022')
title_size =25
subtitle = reshapingarbic('كليه الطب جامعه عين شمس')
y_label = reshapingarbic('عدد الطلاب')
filename = 'eurcountries2022'
#Create subplots and set a colormap
ranking.sort_values(by='Nation2022All', inplace=True,  ascending=True)

#draw a figure with a subplot.         
fig, ax = plt.subplots(figsize=(25,11), facecolor=(.94, .94, .94))
mpl.pyplot.viridis()#colormap

bar = ax.bar(index, values)
plt.tight_layout()
#---ax.yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))
ax.xaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))
ax.xaxis.set_tick_params(labelsize=30)# change the font size of label

title = plt.title(plot_title, pad=20, fontsize=title_size)
plt.subplots_adjust(top=0.8, bottom=0.2,left=0.4)        

ax.grid(zorder=0)

def gradientbars(bars):
    grad = np.atleast_2d(np.linspace(0,1,256)).T
    ax = bars[0].axes
    lim = ax.get_xlim()+ax.get_ylim()
    for bar in bars:
        bar.set_zorder(1)
        bar.set_facecolor('none')
        x,y = bar.get_xy()
        w, h = bar.get_width(), bar.get_height()
        #--ax.imshow(grad, extent=[x, x+w, y, y+h], aspect='auto', zorder=1)
        ax.imshow(grad, extent=[x+w, x, y, y+h], aspect='auto', zorder=1)
    ax.axis(lim)

gradientbars(bar)


#set label
def add_value_labels(ax, spacing=5):
    for rect in ax.patches:
        y_value = rect.get_height()
        x_value = rect.get_x() + rect.get_width() / 2
        space = spacing
        va = 'bottom'
        if y_value < 0:
            space *= -1
            va = 'top'

         # Use X value as label and format number
        label = '{:,.0f}'.format(y_value)
         # Create annotation
        ax.annotate(
            label,                      # Use `label` as label
            (x_value, y_value),         # Place label at bar end
            xytext=(0,space),          # Horizontally shift label by `space`
            textcoords='offset points', # Interpret `xytext` as offset in points
            ha='center',                # Vertically center label
            va=va)
                           # Horizontally align label differently for positive and negative values
                  
# Call the function above
add_value_labels(ax)

# Set subtitle
tfrom = ax.get_xaxis_transform()
ann = ax.annotate(subtitle, xy=(3, 1), xycoords=tfrom, bbox=dict(boxstyle='square,pad=1.3', fc='#f0f0f0', ec='none'))

#Set y-label
ax.set_ylabel(y_label, color='#525252')

plt.xticks(x, countrylabel, rotation=45)

plt.savefig(filename+'.png', facecolor=(.94, .94, .94))

# Commented out IPython magic to ensure Python compatibility.
#2022 Asia counrties
#install libraries       
!pip install numpy scipy matplotlib ipython jupyter pandas sympy nose seaborn
!pip install pip install python-bidi
!pip install arabic_reshaper
#importing libraries           
import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np
import pandas as pd
import seaborn as sns

from bidi.algorithm import get_display
import arabic_reshaper
sns.set()
# %matplotlib notebook
df.head()

x = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]

#reshaping genseia and 
zz=[]
for item in Asia2022.الجنسيه.values:
    zz.append(get_display(arabic_reshaper.reshape(item)))
Asia2022['title']=zz
# create a data frame, sort and format values:
data = pd.DataFrame(Asia2022, columns=['Nation2022All', 'title'])
data_sorted = data.sort_values(by='Nation2022All', ascending=True)
data_sorted['Nation2022All'] = data_sorted['Nation2022All'] / 1
pd.options.display.float_format = '{:,.0f}'.format
data_sorted.set_index('title', inplace=True)
ranking = data_sorted.head(21)

#label x-axis
countrylabel=ranking.index
#variables
index = ranking.index
values = ranking['Nation2022All']
plot_title = reshapingarbic('اجمالي عدد الطلاب الوافدين من قاره اسيا لعام 2022')
title_size =30
subtitle = reshapingarbic('كليه الطب جامعه عين شمس')
y_label = reshapingarbic('عدد الطلاب')
filename = 'Asiacountries2022'
#Create subplots and set a colormap
ranking.sort_values(by='Nation2022All', inplace=True,  ascending=True)

#draw a figure with a subplot.         
fig, ax = plt.subplots(figsize=(25,11), facecolor=(.94, .94, .94))
mpl.pyplot.viridis()#colormap

bar = ax.bar(index, values)
plt.tight_layout()
#---ax.yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))
ax.xaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))
ax.xaxis.set_tick_params(labelsize=20)# change the font size of label

title = plt.title(plot_title, pad=20, fontsize=title_size)
plt.subplots_adjust(top=0.8, bottom=0.2,left=0.4)        

ax.grid(zorder=0)

def gradientbars(bars):
    grad = np.atleast_2d(np.linspace(0,1,256)).T
    ax = bars[0].axes
    lim = ax.get_xlim()+ax.get_ylim()
    for bar in bars:
        bar.set_zorder(1)
        bar.set_facecolor('none')
        x,y = bar.get_xy()
        w, h = bar.get_width(), bar.get_height()
        #--ax.imshow(grad, extent=[x, x+w, y, y+h], aspect='auto', zorder=1)
        ax.imshow(grad, extent=[x+w, x, y, y+h], aspect='auto', zorder=1)
    ax.axis(lim)

gradientbars(bar)


#set label
def add_value_labels(ax, spacing=5):
    for rect in ax.patches:
        y_value = rect.get_height()
        x_value = rect.get_x() + rect.get_width() / 2
        space = spacing
        va = 'bottom'
        if y_value < 0:
            space *= -1
            va = 'top'

         # Use X value as label and format number
        label = '{:,.0f}'.format(y_value)
         # Create annotation
        ax.annotate(
            label,                      # Use `label` as label
            (x_value, y_value),         # Place label at bar end
            xytext=(0,space),          # Horizontally shift label by `space`
            textcoords='offset points', # Interpret `xytext` as offset in points
            ha='center',                # Vertically center label
            va=va)
                           # Horizontally align label differently for positive and negative values
                  
# Call the function above
add_value_labels(ax)

# Set subtitle
tfrom = ax.get_xaxis_transform()
ann = ax.annotate(subtitle, xy=(3, 1), xycoords=tfrom, bbox=dict(boxstyle='square,pad=1.3', fc='#f0f0f0', ec='none'))

#Set y-label
ax.set_ylabel(y_label, color='#525252')

plt.xticks(x, countrylabel, rotation=45)

plt.savefig(filename+'.png', facecolor=(.94, .94, .94))

# Commented out IPython magic to ensure Python compatibility.
#2022 Africa counrties
#install libraries       
!pip install numpy scipy matplotlib ipython jupyter pandas sympy nose seaborn
!pip install pip install python-bidi
!pip install arabic_reshaper
#importing libraries           
import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np
import pandas as pd
import seaborn as sns

from bidi.algorithm import get_display
import arabic_reshaper
sns.set()
# %matplotlib notebook
df.head()

x = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]

#reshaping genseia and 
zz=[]
for item in africa2022.الجنسيه.values:
    zz.append(get_display(arabic_reshaper.reshape(item)))
africa2022['title']=zz
# create a data frame, sort and format values:
data = pd.DataFrame(africa2022, columns=['Nation2022All', 'title'])
data_sorted = data.sort_values(by='Nation2022All', ascending=True)
data_sorted['Nation2022All'] = data_sorted['Nation2022All'] / 1
pd.options.display.float_format = '{:,.0f}'.format
data_sorted.set_index('title', inplace=True)
ranking = data_sorted.head(22)

#label x-axis
countrylabel=ranking.index
#variables
index = ranking.index
values = ranking['Nation2022All']
plot_title = reshapingarbic('اجمالي عدد الطلاب الوافدين من قاره افريقيا لعام 2022')
title_size =30
subtitle = reshapingarbic('كليه الطب جامعه عين شمس')
y_label = reshapingarbic('عدد الطلاب')
filename = 'africacountries2022'
#Create subplots and set a colormap
ranking.sort_values(by='Nation2022All', inplace=True,  ascending=True)

#draw a figure with a subplot.         
fig, ax = plt.subplots(figsize=(25,11), facecolor=(.94, .94, .94))
mpl.pyplot.viridis()#colormap

bar = ax.bar(index, values)
plt.tight_layout()
#---ax.yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))
ax.xaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))
ax.xaxis.set_tick_params(labelsize=15)# change the font size of label

title = plt.title(plot_title, pad=20, fontsize=title_size)
plt.subplots_adjust(top=0.8, bottom=0.2,left=0.4)        

ax.grid(zorder=0)

def gradientbars(bars):
    grad = np.atleast_2d(np.linspace(0,1,256)).T
    ax = bars[0].axes
    lim = ax.get_xlim()+ax.get_ylim()
    for bar in bars:
        bar.set_zorder(1)
        bar.set_facecolor('none')
        x,y = bar.get_xy()
        w, h = bar.get_width(), bar.get_height()
        #--ax.imshow(grad, extent=[x, x+w, y, y+h], aspect='auto', zorder=1)
        ax.imshow(grad, extent=[x+w, x, y, y+h], aspect='auto', zorder=1)
    ax.axis(lim)

gradientbars(bar)


#set label
def add_value_labels(ax, spacing=5):
    for rect in ax.patches:
        y_value = rect.get_height()
        x_value = rect.get_x() + rect.get_width() / 2
        space = spacing
        va = 'bottom'
        if y_value < 0:
            space *= -1
            va = 'top'

         # Use X value as label and format number
        label = '{:,.0f}'.format(y_value)
         # Create annotation
        ax.annotate(
            label,                      # Use `label` as label
            (x_value, y_value),         # Place label at bar end
            xytext=(0,space),          # Horizontally shift label by `space`
            textcoords='offset points', # Interpret `xytext` as offset in points
            ha='center',                # Vertically center label
            va=va)
                           # Horizontally align label differently for positive and negative values
                  


# Call the function above
add_value_labels(ax)

# Set subtitle
tfrom = ax.get_xaxis_transform()
ann = ax.annotate(subtitle, xy=(3, 1), xycoords=tfrom, bbox=dict(boxstyle='square,pad=1.3', fc='#f0f0f0', ec='none'))

#Set y-label
ax.set_ylabel(y_label, color='#525252')

plt.xticks(x, countrylabel, rotation=45)

plt.savefig(filename+'.png', facecolor=(.94, .94, .94))

#comparison betwwen 3 qara

import matplotlib
import matplotlib.pyplot as plt
import numpy as np
!pip install pip install python-bidi
!pip install arabic_reshaper
from bidi.algorithm import get_display

matplotlib.rcParams['interactive'] == True
plt.rcParams['figure.figsize']=(15,15)

men_means = [20, 34, 30, 35, 27]
women_means = [25, 32, 34, 20, 25]

labelsstudents2022 = ['frist class', 'second Class', 'third Class', 'fourth Class', 'Fifth Class']
x = np.arange(len(labelsstudents2022))  # the label locations
width = 0.2  # the width of the bars

fig, ax = plt.subplots()
rects1 = ax.bar(x - width/2, eur2022_sum, width,color='#FFCA3E', label=reshapingarbic('اوروبا وامريكا الشماليه والجنوبيه'))
rects2 = ax.bar(x + width/2, africa2022_sum, width,color='#E65F8E', label=reshapingarbic('افريقيا'))
rects3 = ax.bar(x + 1.5*width, Asia2022_sum, width,color='#A86BD1', label=reshapingarbic('اسيا'))

# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel(reshapingarbic('عدد الطلاب '),fontsize=15)
ax.set_title(reshapingarbic('  مقارنه بين عدد الطلاب بالفرق الدراسيه بالنسبه من حيث القارات لعام 2022'),fontsize=30)
ax.set_xticks(x)
ax.set_xticklabels(labelsstudents2022,fontsize=20)
ax.legend()

def autolabel(rects):
    """Attach a text label above each bar in *rects*, displaying its height."""
    for rect in rects:
        height = rect.get_height()
        ax.annotate('{}'.format(height),
                    xy=(rect.get_x() + rect.get_width() / 2, height),
                    xytext=(0, 3),  # 3 points vertical offset
                    textcoords="offset points",
                    ha='center', va='bottom')


autolabel(rects1)
autolabel(rects2)
autolabel(rects3)
fig.tight_layout()

plt.show()

#europe students2022 bar GRAGH
import numpy as np
import pandas as pd
from pandas import Series, DataFrame
import plotly.express as px
import matplotlib.pyplot as plt
!pip install pip install python-bidi
!pip install arabic_reshaper
from bidi.algorithm import get_display
import matplotlib.pyplot as europe2022
import arabic_reshaper


##########################
labelsstudents2022 = ['frist class', 'second Class', 'third Class', 'fourth Class', 'Fifth Class']
europe2022.figure(figsize=(20,15))
europe2022.xticks(range(len(eur2022_sum)), labelsstudents2022,fontsize=20)
europe2022.xlabel(reshapingarbic('الفرقه الدراسية'),fontsize=20)
europe2022.ylabel(reshapingarbic('عدد الطلاب'),fontsize=20)
europe2022.title(reshapingarbic('إحصائية اجمالي عدد الطلاب الوافدين من قارات اوروبا وامريكا الشماليه والجنوبية لعام 2022'),fontsize=20)
europe2022.bar(range(len(eur2022_sum)), eur2022_sum ,color='#3BB58F') 
addlabels(labelsstudents2022, eur2022_sum)#add numbers above colums#

europe2022.show()

#asia students2022 bar GRAGH
import numpy as np
import pandas as pd
from pandas import Series, DataFrame
import plotly.express as px
import matplotlib.pyplot as plt
!pip install pip install python-bidi
!pip install arabic_reshaper
from bidi.algorithm import get_display
import matplotlib.pyplot as Asia2022
import arabic_reshaper


##########################
labelsstudents2022 = ['frist class', 'second Class', 'third Class', 'fourth Class', 'Fifth Class']
Asia2022.figure(figsize=(20,15))
Asia2022.xticks(range(len(Asia2022_sum)), labelsstudents2022,fontsize=20)
Asia2022.xlabel(reshapingarbic('الفرقه الدراسية'),fontsize=20)
Asia2022.ylabel(reshapingarbic('عدد الطلاب'),fontsize=20)
Asia2022.title(reshapingarbic('إحصائية اجمالي عدد الطلاب الوافدين من قاره اسيا لعام 2022'),fontsize=20)
Asia2022.bar(range(len(Asia2022_sum)), Asia2022_sum ,color='#3BB58F') 
addlabels(labelsstudents2022, Asia2022_sum)#add numbers above colums#

Asia2022.show()

#africa students2022 bar GRAGH
import numpy as np
import pandas as pd
from pandas import Series, DataFrame
import plotly.express as px
import matplotlib.pyplot as plt
!pip install pip install python-bidi
!pip install arabic_reshaper
from bidi.algorithm import get_display
import matplotlib.pyplot as africa2022
import arabic_reshaper


##########################
labelsstudents2022 = ['frist class', 'second Class', 'third Class', 'fourth Class', 'Fifth Class']
africa2022.figure(figsize=(20,15))
africa2022.xticks(range(len(africa2022_sum)), labelsstudents2022,fontsize=20)
africa2022.xlabel(reshapingarbic('الفرقه الدراسية'),fontsize=20)
africa2022.ylabel(reshapingarbic('عدد الطلاب'),fontsize=20)
africa2022.title(reshapingarbic('إحصائية اجمالي عدد الطلاب الوافدين من قاره افريقيا لعام 2022'),fontsize=20)
africa2022.bar(range(len(africa2022_sum)), africa2022_sum ,color='#3BB58F') 
addlabels(labelsstudents2022, africa2022_sum)#add numbers above colums#

africa2022.show()

